MANIFEST
you can pass some extra information to the browser, and browser display some things about your application differently.
and the browser depending on which operating system its running on can even allow your app to install itself on the home screen of your user.

CONTENT OF MANIFEST
"name": "Sweaty - Activity Tracker" // long name of app (e.g. on Splashscreen)
"short_name": "Sweaty" // short name of app (e.g. below icon)
"start_url": "/index.html" // which page to load on start up
"scope": "." // which pages are includeed in "PWA Experience", dot simply means all the pages in our web folder. so in the public folder here are included.
                if we would only specify a subfolder lets say the help folder. that would mean that for every other page that browser will not use the settings we set up here in the json file.
"display": "standalone" // should it look like a standalone app(dont see the browser controls at the top or url bar), or fullscreen like native app, minimal-ui, browser
"background_color": "#fff" // background whilst loading & on Splashscreen 
"theme_color": "#351b5"  // theme color (e.g. on top bar in task switcher)
"description": "keep running until your super sweaty!" // description (e.g. as favorite)
"dir": "ltr" // read direction of your app
"lang" "en-US" // main language of app
"orientation": "portrait-primary" // set (and enforce) default orientation
"icons": [...] // configure icons (e.g. on homescreen) 48x48 96x96 128x128 512x512
                [
                    {
                        "src": "/src/images/icons/app-icon-48x48.png",
                        "type": "image/png",
                        "size": "48x48"
                    }
                ]
"related_applications" : [
    {
        "platform": "play",
        "url": "https://play.google.com",
        "id": "com.example.app1"
    }
]

https://developers.google.com/web/fundamentals/app-install-banners/native

=====

FAQ SERVICE WORKERS
https://jakearchibald.github.io/isserviceworkerready/#moar
https://web.dev/customize-install/
Is the Service Worker installed everytime I refresh the page?

No, whilst the browser does of course (naturally) execute the register()  code everytime you refresh the page, it won't install the service worker if the service worker file hasn't changed. If it only changed by 1 byte though, it'll install it as a new service worker (but wait with the activation as explained).

Can I unregister a Service Worker?

Yes, this is possible, the following code does the trick:

navigator.serviceWorker.getRegistrations().then(function(registrations) {
 for(let registration of registrations) {
  registration.unregister()
} })
My app behaves strangely/ A new Service Worker isn't getting installed.

It probably gets installed but you still have some tab/ window with your app open (in one and the same browser). New service workers don't activate before all tabs/ windows with your app running in it are closed. Make sure to do that and then try again.

Can I have multiple 'fetch' listeners in a service worker?

Yes, this is possible.

Can I have multiple service workers on a page?

Yes, but only with different scopes. You can use a service worker for the /help "subdirectory" and one for the rest of your app. The more specific service worker (=> /help) overwrites the other one for its scope.

Can Service Workers communicate with my Page/ the "normal" JavaScript code there?

Yes, that's possible using messages. Have a look at the following thread for more infos: https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers#Sending_messages_to_and_from_a_dedicated_worker

This is actually not Service Worker specific, it applies to all Web Workers.

What's the difference between Web Workers and Service Workers?

Service Workers are a special type of Web Workers. Web Workers also run on a background thread, decoupled from the DOM. They don't keep on living after the page is closed though. The Service Worker on the other hand, keeps on running (depending on the operating system) and also is decoupled from an individual page. 

====

CORS is set by the server,

nothing we can do, if the server doesn't set this, we can't enforce it. Some servers don't set these headers

which basically means if you were accessing the data from a different origin and the URL the server

is running on, you're not allowed to read the content of the response.


=====

Now there is one thing in the head section I also want to outline, besides all our icons here and so

on,

there's this meta tag here where we set the viewport.

Now here I actually use a relatively default set up where I set the width to the device width and then I also set

something which is not seen in every application.

Now by sitting width equal to device width, we ensure that we actually scale this application correctly

to the different device widths, so that you don't get the look of opening a desktop page on a mobile device

but instead that we enforce the mobile device boundaries to the application and hence enter the responsive

mode we configured with media queries and so on. The users scalable set up here makes sure that the

user can't pinch and zoom in our application.

Now you can discuss this controversially because you kind of make your application a little bit less

accessible because people can't zoom in, on the other hand, you really get a mobile app-like feeling if you

have like application where you can't zoom out and in.

Responsive Design Basics by Google: https://developers.google.com/web/fundamentals/design-and-ui/responsive/
Responsive Design Patterns (Google): https://developers.google.com/web/fundamentals/design-and-ui/responsive/patterns
Responsive Images (Google): https://developers.google.com/web/fundamentals/design-and-ui/responsive/images
Using CSS Media Queries: https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries
Responsive Images (MDN): https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images
Responsive Images in CSS: https://css-tricks.com/responsive-images-css/
Using CSS Animations: http://learn.shayhowe.com/advanced-html-css/transitions-animations/

=====

firebase 
subscriptions {
    -MTnitofeuyZmWwEdio0 {
        // incorporate out vapid public key information

        // google server endpoint for chrome
        endpoint: "https://fcm.googleapis.com/fcm/send/cc1EbgQ22lQ..."
        keys {
            auth: "NXYBVkJDba78o9Gx904a8A",
            p256dh: "BAp_luf05PuG92SLjujfTvkxHul1DiliJexl26oFzIXokeR..."
        }
    }
}

I always emphasize that the subscription refers to a browser on the device and this is true.
It also refers to a given service worker there because as you saw when we set up the subscription, we
set it up through the service worker.
Now if we go to our client application, to the applications tab and click clear site data, we also get
rid of the service worker, at least if we have unregistered servers workers ticked here
and then also get rid of our existing subscriptions.
Of course not on the server because we don't reach out to the server to clear them here.
We better would do that though because these subscriptions on the server won't work anymore if we unregister
the service worker, if we just update it by simply adding code to the service worker, reloading the page,
closing the tab and opening a new one,
so this normal update procedure,
it won't be a problem because there, we won't re-install a completely new one but if we unregister a
service worker, we render all existing subscriptions useless.
So use this with care, that's something you definitely have to keep in mind.
Keep your service worker registered, update it,
whatever you need to do
but if you unregister it, also make sure to clear up your subscriptions on the server because they will
no longer be valid.


======

We'll have a look at workbox a tool by Google which makes managing your service worker easier and

way more automatic.

You'll learn how to use it how to use its more advanced features like routing or request parsing.