MANIFEST
you can pass some extra information to the browser, and browser display some things about your application differently.
and the browser depending on which operating system its running on can even allow your app to install itself on the home screen of your user.

CONTENT OF MANIFEST
"name": "Sweaty - Activity Tracker" // long name of app (e.g. on Splashscreen)
"short_name": "Sweaty" // short name of app (e.g. below icon)
"start_url": "/index.html" // which page to load on start up
"scope": "." // which pages are includeed in "PWA Experience", dot simply means all the pages in our web folder. so in the public folder here are included.
                if we would only specify a subfolder lets say the help folder. that would mean that for every other page that browser will not use the settings we set up here in the json file.
"display": "standalone" // should it look like a standalone app(dont see the browser controls at the top or url bar), or fullscreen like native app, minimal-ui, browser
"background_color": "#fff" // background whilst loading & on Splashscreen 
"theme_color": "#351b5"  // theme color (e.g. on top bar in task switcher)
"description": "keep running until your super sweaty!" // description (e.g. as favorite)
"dir": "ltr" // read direction of your app
"lang" "en-US" // main language of app
"orientation": "portrait-primary" // set (and enforce) default orientation
"icons": [...] // configure icons (e.g. on homescreen) 48x48 96x96 128x128 512x512
                [
                    {
                        "src": "/src/images/icons/app-icon-48x48.png",
                        "type": "image/png",
                        "size": "48x48"
                    }
                ]
"related_applications" : [
    {
        "platform": "play",
        "url": "https://play.google.com",
        "id": "com.example.app1"
    }
]

https://developers.google.com/web/fundamentals/app-install-banners/native

=====

FAQ SERVICE WORKERS
https://jakearchibald.github.io/isserviceworkerready/#moar
https://web.dev/customize-install/
Is the Service Worker installed everytime I refresh the page?

No, whilst the browser does of course (naturally) execute the register()  code everytime you refresh the page, it won't install the service worker if the service worker file hasn't changed. If it only changed by 1 byte though, it'll install it as a new service worker (but wait with the activation as explained).

Can I unregister a Service Worker?

Yes, this is possible, the following code does the trick:

navigator.serviceWorker.getRegistrations().then(function(registrations) {
 for(let registration of registrations) {
  registration.unregister()
} })
My app behaves strangely/ A new Service Worker isn't getting installed.

It probably gets installed but you still have some tab/ window with your app open (in one and the same browser). New service workers don't activate before all tabs/ windows with your app running in it are closed. Make sure to do that and then try again.

Can I have multiple 'fetch' listeners in a service worker?

Yes, this is possible.

Can I have multiple service workers on a page?

Yes, but only with different scopes. You can use a service worker for the /help "subdirectory" and one for the rest of your app. The more specific service worker (=> /help) overwrites the other one for its scope.

Can Service Workers communicate with my Page/ the "normal" JavaScript code there?

Yes, that's possible using messages. Have a look at the following thread for more infos: https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers#Sending_messages_to_and_from_a_dedicated_worker

This is actually not Service Worker specific, it applies to all Web Workers.

What's the difference between Web Workers and Service Workers?

Service Workers are a special type of Web Workers. Web Workers also run on a background thread, decoupled from the DOM. They don't keep on living after the page is closed though. The Service Worker on the other hand, keeps on running (depending on the operating system) and also is decoupled from an individual page. 

====

CORS is set by the server,

nothing we can do, if the server doesn't set this, we can't enforce it. Some servers don't set these headers

which basically means if you were accessing the data from a different origin and the URL the server

is running on, you're not allowed to read the content of the response.